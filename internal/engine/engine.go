// Copyright (C) 2017 Betalo AB - All Rights Reserved

package engine

import (
	"bytes"
	"io"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/betalo-sweden/go-corp-linter/internal/rule/copyright"
	"github.com/betalo-sweden/go-corp-linter/internal/rule/imports"
	"github.com/betalo-sweden/go-corp-linter/internal/rule/sqlstatement"
	"github.com/betalo-sweden/go-corp-linter/internal/rule/writeerror"
)

var rules = []func(fp string, out io.Writer) error{
	copyright.ProcessFile,
	imports.ProcessFile,
	writeerror.ProcessFile,
	sqlstatement.ProcessFile,
}

// Process walks a given sequence of directories and tries to identify rule
// violations.
func Process(dirs []string, out io.Writer, verboseMode bool) error {
	for _, dir := range dirs {
		err := filepath.Walk(dir, process(dir, out, verboseMode))
		if err != nil {
			return err
		}
	}
	return nil
}

func process(root string, out io.Writer, verbose bool) func(fp string, fi os.FileInfo, err error) error {
	return func(fp string, fi os.FileInfo, err error) error {
		if verbose {
			log.Println("Debug: processing", fp)
		}

		if err != nil {
			log.Println("Error:", err)
			return nil
		}

		if fi.IsDir() {
			if fp == root {
				return nil
			}
			return filepath.SkipDir
		}

		// Excludes

		// Skip vendored files, as we can't influence them.
		if strings.Contains(fp, "vendor/") {
			return nil
		}

		// Skip non-go files as we don't want to/likely can't
		// enforce linting on them.
		if !strings.HasSuffix(fp, ".go") {
			return nil
		}

		// Skip auto-generated go files.
		b, err := head(fp, autogenHeaderPrefixLen)
		if err != nil {
			return err
		}
		header := bytes.TrimSpace(b)
		if bytes.Equal(header, autogenHeaderPrefix) {
			return nil
		}

		// Ignore empty files not having copyright
		if len(header) == 0 {
			return nil
		}

		// Rules

		for _, rule := range rules {
			if err = rule(fp, out); err != nil {
				return err
			}
		}

		return nil
	}
}

var (
	autogenHeaderPrefix    = []byte("// Code generated by")
	autogenHeaderPrefixLen = int64(len(autogenHeaderPrefix))
)

func head(filepath string, size int64) ([]byte, error) {
	f, err := os.Open(filepath)
	if err != nil {
		return nil, err
	}
	defer func() { _ = f.Close() }()

	b := make([]byte, size)
	_, err = f.Read(b)
	if err != io.EOF {
		err = nil
	}
	return b, err
}
